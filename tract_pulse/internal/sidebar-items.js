initSidebarItems({"enum":[["AttrOrInput",""],["AxisOp",""],["Cost",""],["Cow","A clone-on-write smart pointer."],["DatumType",""],["GeometryBound",""],["InOut",""],["QParams",""],["RValue",""],["TDim",""],["TypeName",""],["Validation","Level of precision to be expected in implementations comparisons."]],"fn":[["arr4",""],["change_axes",""],["dyn_hash",""],["eval_order","Find an evaluation order for a model, using its default inputs and outputs as boundaries."],["for_model",""],["full_axis_tracking",""],["hash_f32",""],["hash_opt_f32",""],["invocation",""],["logical",""],["multicast",""],["natural_strides",""],["numeric",""],["param",""],["parse_parameters",""],["perm_to_ops",""],["rctensor0",""],["rctensor1",""],["rctensor2",""],["rctensor3",""],["rctensor4",""],["round_ties_to_even",""],["string",""],["tensor0",""],["tensor1",""],["tensor2",""],["tensor3",""],["tensor4",""]],"macro":[["Hash","Derive macro generating an impl of the trait `Hash`."],["anyhow","Construct an ad-hoc error from a string or existing non-`anyhow` error value."],["args_1",""],["args_2",""],["args_3",""],["args_4",""],["args_5",""],["args_6",""],["args_7",""],["args_8",""],["as_op",""],["bail","Return early with an error."],["bin_to_super_type",""],["dispatch_copy",""],["dispatch_copy_by_size",""],["dispatch_datum",""],["dispatch_datum_by_size",""],["dispatch_floatlike",""],["dispatch_hash",""],["dispatch_numbers",""],["dispatch_signed",""],["element_wise",""],["element_wise_oop",""],["format_err","Construct an ad-hoc error from a string or existing non-`anyhow` error value."],["impl_dyn_hash",""],["impl_op_same_as",""],["not_a_typed_op",""],["op_as_typed_op",""],["op_pulse",""],["tvec",""]],"mod":[["fmt","Utilities for formatting and printing `String`s."],["tract_core","Tract"]],"struct":[["Arc","A thread-safe reference-counting pointer. ‘Arc’ stands for ‘Atomically Reference Counted’."],["AxisChange",""],["AxisChangeConsequence",""],["AxisInfo","Translation invariance property."],["AxisTracking",""],["Blob",""],["FragmentDecl",""],["FragmentDef",""],["Graph","Main model class"],["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["InletId","Identifier for a node input in the graph."],["IntoAst",""],["Invariants",""],["ModelBuilder",""],["ModelPatch","A change to apply to a model."],["Nnef",""],["Node","A Node in an Model."],["Outlet","Information for each outlet of a node"],["OutletId","Identifier for a node output in the graph."],["OutletMap",""],["Parameter",""],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["Registry",""],["ResolvedInvocation",""],["SessionState",""],["ShapeFact",""],["SimplePlan",""],["SimpleState",""],["Symbol",""],["SymbolValues",""],["Tensor","Tensor is a concrete tensor in tract."],["TensorView",""],["TypeId","A `TypeId` represents a globally unique identifier for a type."],["TypedFact","Fully determined tensor information for TypedModel."],["f16",""]],"trait":[["ClampCast",""],["Datum",""],["DimLike","A super-trait for value acting as tensor dimensions in tract."],["Downcast","Supports conversion to `Any`. Traits to be extended by `impl_downcast!` must extend `Downcast`."],["DynHash",""],["ElementWiseMiniOp",""],["EvalOp",""],["Fact","Type information about a tensor: shape, and element type, in various state of determination."],["Framework","A Framework that translate its model to tract core model."],["Hash","A hashable type."],["IntoArcTensor","Convenient conversion to Arc."],["IntoTensor","Convenient conversion to Tensor."],["Op","A base operation"],["OpState",""],["ResolveTo",""],["SloppyHash",""],["SpecialOps",""],["ToDim","Convenience trait to convert values to TDim."],["TractErrorContext","Provides the `context` method for `Result`."],["TypedOp",""]],"type":[["FromTract",""],["RunnableModel","A runnable model with fixed inputs and outputs."],["TVec","A Smallvec instantiation with 4 embeddable values."],["ToTract",""],["TractError",""],["TractResult",""],["TypedModel","A model with completely determined types and shapes."],["TypedModelPatch","A ModelPatch for TypedModel."],["TypedNode","Node for TypedModel graph"],["TypedRunnableModel","A runnable TypedModel (new name for SimplePlan)."],["TypedSimplePlan","An execution plan for TypedModel."],["TypedSimpleState","An execution state for TypedModel."]]});