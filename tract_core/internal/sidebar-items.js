initSidebarItems({"enum":[["Cow","A clone-on-write smart pointer."],["DatumType",""],["GeometryBound",""],["QParams",""],["TDim",""]],"fn":[["arr4",""],["dyn_hash",""],["hash_f32",""],["hash_opt_f32",""],["natural_strides",""],["rctensor0",""],["rctensor1",""],["rctensor2",""],["rctensor3",""],["rctensor4",""],["round_ties_to_even",""],["tensor0",""],["tensor1",""],["tensor2",""],["tensor3",""],["tensor4",""]],"macro":[["Hash","Derive macro generating an impl of the trait `Hash`."],["anyhow","Construct an ad-hoc error from a string or existing non-`anyhow` error value."],["bail","Return early with an error."],["dispatch_copy",""],["dispatch_copy",""],["dispatch_copy_by_size",""],["dispatch_datum",""],["dispatch_datum",""],["dispatch_datum_by_size",""],["dispatch_datum_by_size",""],["dispatch_floatlike",""],["dispatch_floatlike",""],["dispatch_hash",""],["dispatch_numbers",""],["dispatch_numbers",""],["dispatch_signed",""],["format_err","Construct an ad-hoc error from a string or existing non-`anyhow` error value."],["tvec",""],["tvec",""]],"mod":[["tract_itertools","Extra iterator adaptors, functions and macros."],["tract_ndarray","The `ndarray` crate provides an n-dimensional container for general elements and for numerics."],["tract_smallvec","Small vectors in various sizes. These store a certain number of elements inline, and fall back to the heap for larger allocations.  This can be a useful optimization for improving cache locality and reducing allocator traffic for workloads that fit within the inline buffer."]],"struct":[["Blob",""],["HashMap","A hash map implemented with quadratic probing and SIMD lookup."],["PhantomData","Zero-sized type used to mark things that “act like” they own a `T`."],["Symbol",""],["SymbolValues",""],["Tensor","Tensor is a concrete tensor in tract."],["TensorView",""],["f16",""]],"trait":[["ClampCast",""],["Datum",""],["DimLike","A super-trait for value acting as tensor dimensions in tract."],["DynHash",""],["Hash","A hashable type."],["IntoArcTensor","Convenient conversion to Arc."],["IntoTensor","Convenient conversion to Tensor."],["ResolveTo",""],["SloppyHash",""],["ToDim","Convenience trait to convert values to TDim."],["TractErrorContext","Provides the `context` method for `Result`."]],"type":[["TVec","A Smallvec instantiation with 4 embeddable values."]]});